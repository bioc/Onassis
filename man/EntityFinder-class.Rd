% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/AllConstructors.R,
%   R/AllGenerics.R, R/EntityFinder-methods.R
\docType{class}
\name{EntityFinder-class}
\alias{EntityFinder-class}
\alias{EntityFinder}
\alias{typeSystemRef}
\alias{typeSystemRef<-}
\alias{annotateDF}
\alias{findEntities}
\alias{typeSystemRef,EntityFinder-method}
\alias{typeSystemRef,}
\alias{EntityFinder-method}
\alias{typeSystemRef<-,EntityFinder-method}
\alias{findEntities,EntityFinder,character,logical,character,CMoptions,CMdictionary-method}
\alias{findEntities,EntityFinder-method}
\alias{annotateDF,EntityFinder,data.frame,character,CMoptions-method}
\alias{annotateDF,EntityFinder-method}
\title{EntityFinder class to create a Conceptmapper instance}
\usage{
EntityFinder(typeSystemRef = .jnull())

typeSystemRef(x)

typeSystemRef(x) <- value

annotateDF(object, descr_df, outDir = tempdir(), configOpt, cmDict)

findEntities(object, inputDirOrFile, multipleDocs = FALSE,
  outDir = tempdir(), configOpt, cmDict)

\S4method{typeSystemRef}{EntityFinder}(x)

\S4method{typeSystemRef}{EntityFinder}(x) <- value


  \S4method{findEntities}{EntityFinder,character,logical,character,CMoptions,CMdictionary}(object,
  inputDirOrFile, multipleDocs = FALSE, outDir = tempdir(), configOpt,
  cmDict)

\S4method{annotateDF}{EntityFinder,data.frame,character,CMoptions}(object,
  descr_df, outDir = tempdir(), configOpt, cmDict)
}
\arguments{
\item{typeSystemRef}{the reference to the ccp-nlp type system}

\item{x}{instance of the class EntityFinder}

\item{value}{the java type system to detect concepts from ontologies.}

\item{object}{instance of the class EntityFinder}

\item{descr_df}{the table of text to annotate. The data frame should have identifiers in the first column and descriptions or text in the rest of the columns.}

\item{outDir}{The directory where the Conceptmapper annotated files are stored. Default: the system tmp directory.}

\item{configOpt}{Object of type CMoptions in which the parameters to run Conceptmapper are stored}

\item{cmDict}{Object of type CMdictionary containing the reference to a previously created Conceptmapper dictionary. Alternatively the path to a Conceptmapper xml file can be passed.}

\item{inputDirOrFile}{the directory where the files to annotate are stored or the text file to annotate. A single file containing in each row sample names, the | symbol and the description of the sample is also allowed.}

\item{multipleDocs}{TRUE if a single file containing different text sources has been given as inputDirOrFile. FALSE if each text is in a separate file. Defaults to FALSE}
}
\value{
instance of the class CMoptions set to the default combination of values

the reference to the Java type system currently set

The updated EntityFinder S4 object

A data frame of annotations containing the sample name, the id of the OBO concept, the corresponding name, the part of the text containing the annotation

A data frame of annotations containing the sample name, the id of the OBO concept, the corresponding name, the part of the text containing the annotation
}
\description{
EntityFinder is a class that wraps a Conceptmapper pipeline using the CCP UIMA Type System \url{https://github.com/UCDenver-ccp/ccp-nlp}. The pipeline includes a sentence detector, offset tokenizer and retrieves concepts from dictionaries built from  OBO/OWL formatted ontology files.

This function shows the list of possible combinations of options to run the entity finder

Method typeSystemRef

Method typeSystemRef<-

Method annotateDF

Method findEntities

This method sets the type system to the ccp-nlp one to run the EntityFinder

This method sets the type system to the ccp-nlp one to run the EntityFinder

This method finds concepts of a Conceptmapper Dictionary of type CMdictionary in a given directory or in a single pipe separated file containing a named document in each row, with a specified configuration of type CMoptions.

This method finds concepts of a Conceptmapper Dictionary of type CMdictionary of data contained in a data frame, with a specified configuration of type CMoptions.
}
\details{
The following methods can be applied to EntityFinder

\code{\link{findEntities}} \cr
}
\section{Slots}{

\describe{
\item{\code{typeSystemRef}}{The reference to the Java object representing the type system}
}}

\examples{
finder <- new('EntityFinder')
op <- CMoptions()
ef <- EntityFinder()
typeSystemRef(ef)
ef <- EntityFinder()
type_system_array_list <- .jnew('java/util/ArrayList')
ccp_nlp_type_system <- .jfield('edu/ucdenver/ccp/nlp/uima/util/TypeSystemUtil',
 name = 'CCP_TYPE_SYSTEM')
sentence_detector_type_system_str <- 'org.cleartk.token.type.Sentence'
conceptmapper_type_system <-
'edu.ucdenver.ccp.nlp.wrapper.conceptmapper.TypeSystem'
dictTerm <- 'analysis_engine.primitive.DictTerm'
tokenizer <- 'org.apache.uima.conceptMapper.support.tokenizer.TokenAnnotation'
vector_of_ts <- c(ccp_nlp_type_system, sentence_detector_type_system_str,
 conceptmapper_type_system, dictTerm, tokenizer)
type_system_description <-
J('org/uimafit/factory/TypeSystemDescriptionFactory')$createTypeSystemDescription(vector_of_ts)
typeSystemRef(ef) <- type_system_description
obo <- system.file('extdata', 'sample.cs.obo', package='OnassisJavaLibs')
dict <- CMdictionary(inputFileOrDb=obo, outputDir=getwd(), synonymType='ALL')

opts <- CMoptions()
ef <- EntityFinder()
annotations <- findEntities(ef,
system.file('extdata', 'test_samples', 'test_samples.txt', package='Onassis'), multipleDocs=TRUE, outDir=getwd(),
 configOpt=opts, cmDict=dict)

obo <- system.file('extdata', 'sample.cs.obo', package='OnassisJavaLibs')
dict <- dictionary(inputFileOrDb=obo, outputdir=getwd(), synonymType='ALL')
opts <- CMoptions()
ef <- EntityFinder()
methylation <- readRDS(system.file('extdata', 'vignette_data',
'GEOmethylation.rds', package='Onassis'))
annotations <- annotateDF(ef, methylation[1:10, ], getwd(), opts, dict)
}
