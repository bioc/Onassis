% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/AllGenerics.R,
%   R/EntityFinder-methods.R
\docType{class}
\name{EntityFinder-class}
\alias{EntityFinder-class}
\alias{findEntities}
\alias{annotateDF}
\alias{findEntities,EntityFinder-method}
\alias{annotateDF,EntityFinder-method}
\title{EntityFinder class to create a Conceptmapper instance}
\usage{
findEntities(object, inputDirOrFile, multipleDocs = FALSE,
  outDir = tempdir(), configOpt, cmDict)

annotateDF(object, descr_df, outDir = tempdir(), configOpt, cmDict)

\S4method{findEntities}{EntityFinder}(object, inputDirOrFile,
  multipleDocs = FALSE, outDir = tempdir(), configOpt, cmDict)

\S4method{annotateDF}{EntityFinder}(object, descr_df, outDir = tempdir(),
  configOpt, cmDict)
}
\arguments{
\item{object}{instance of the class EntityFinder}

\item{inputDirOrFile}{the directory where the files to annotate are stored or the text file to annotate. A single file containing in each row sample names, the | symbol and the description of the sample is also allowed.}

\item{multipleDocs}{TRUE if a single file containing different text sources has been given as inputDirOrFile. FALSE if each text is in a separate file. Defaults to FALSE}

\item{outDir}{The directory where the Conceptmapper annotated files are stored. Default: the system tmp directory.}

\item{configOpt}{Object of type CMoptions in which the parameters to run Conceptmapper are stored}

\item{cmDict}{Object of type CMdictionary containing the reference to a previously created Conceptmapper dictionary. Alternatively the path to a Conceptmapper xml file can be passed.}

\item{descr_df}{the table of text to annotate. The data frame should have identifiers in the first column and descriptions or text in the rest of the columns.}
}
\value{
A data frame of annotations containing the sample name, the id of the OBO concept, the corresponding name, the part of the text containing the annotation

A data frame of annotations containing the sample name, the id of the OBO concept, the corresponding name, the part of the text containing the annotation
}
\description{
EntityFinder is a class that wraps a Conceptmapper pipeline using the CCP UIMA Type System \url{https://github.com/UCDenver-ccp/ccp-nlp}. The pipeline includes a sentence detector, offset tokenizer and retrieves concepts from dictionaries built from  OBO/OWL formatted ontology files.

Method findEntities

Method annotateDF

This method finds concepts of a Conceptmapper Dictionary of type CMdictionary in a given directory or in a single pipe separated file containing a named document in each row, with a specified configuration of type CMoptions.

This method finds concepts of a Conceptmapper Dictionary of type CMdictionary of data contained in a data frame, with a specified configuration of type CMoptions.
}
\details{
The following methods can be applied to EntityFinder

\code{\link{findEntities}} \cr
\code{\link{buildDictionary}} \cr
}
\section{Slots}{

\describe{
\item{\code{typeSystemRef}}{The reference to the Java object representing the type system}
}}

\examples{
finder <- new('EntityFinder')
dict_file <-  file.path(getwd(), 'BrendaTissue.obo')

 if(!file.exists(dict_file))
   download.file('https://sourceforge.net/projects/onassis/files/BrendaTissue.obo',
    destfile=file.path(getwd(), 'BrendaTissue.obo'))
dict <- CMdictionary(inputFile=file.path(getwd(), 'BrendaTissue.obo'),
 outputdir=getwd(), synonymType='ALL')

opts <- new('CMoptions')
ef <- new('EntityFinder')
brenda_annotations <- findEntities(ef,
system.file('extdata', 'testsamples', package='Onassis'), multipleDocs=FALSE,
 configOpt=opts, cmDict=dict)

dict_file <-  file.path(getwd(), 'BrendaTissue.obo')

 if(!file.exists(dict_file))
   download.file('https://sourceforge.net/projects/onassis/files/BrendaTissue.obo',
    destfile=file.path(getwd(), 'BrendaTissue.obo'))
brenda_dict <- CMdictionary(inputFile=file.path(getwd(), 'BrendaTissue.obo'),
 outputdir=getwd(), synonymType='ALL')
opts <- new('CMoptions')
ef <- new('EntityFinder')
methylation <- readRDS(system.file('extdata', 'vignette_data',
'GEOmethylation.rds', package='Onassis'))
annotations <- annotateDF(ef, methylation[1:10, ], getwd(), opts, brenda_dict)
}
