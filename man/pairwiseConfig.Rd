% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/similarity-methods.R
\docType{methods}
\name{pairwiseConfig}
\alias{pairwiseConfig}
\alias{pairwiseConfig<-}
\alias{pairwiseConfig,Similarity-method}
\alias{pairwiseConfig<-,Similarity-method}
\alias{pairwiseConfig-methods}
\title{Method pairwiseConfig}
\usage{
pairwiseConfig(object)

pairwiseConfig(object) <- value

\S4method{pairwiseConfig}{Similarity}(object)

\S4method{pairwiseConfig}{Similarity}(object) <- value
}
\arguments{
\item{object}{instance of the class Similarity}

\item{value}{One of the allowed pairwise semantic similarity measures. For a complete list check the details section.}
}
\value{
The pairwise measure

instance of the Similarity class with the new pairwise option.
}
\description{
Method pairwiseConfig

Method pairwiseConfig<-

This method shows the value of the pairwise configuration.

and configures the pairwise measure to compute semantic similarity between two concepts of a given ontology.
}
\details{
The following measures can be used to compute semantic similarities between two concepts.
\itemize{
\item{"edge_rada_lca"} {: Computes the similarity of two concepts based on the shortest path linking the two concepts.

\eqn{sim(u,v) = 1 /sp(u,v)}

}
\item{"edge_wupalmer"}{: Computes the similarity of two concepts based on the depth of the concepts and the depth of their most specific common ancestor

\eqn{sim(u,v) = depth(MSCA[u,v]) / (depth(u) + depth(v))}

}
\item{"edge_resnik"}{: Computes the similarity of two concepts based on the shortest path between the concepts and the maximum depth of the taxonomy

\eqn{ (2 * max_depth - min_sp(u,v)) / (2 * max_depth) }

max_depth is the maximum depth in the ontology

sp(u,v) is the shortest path legnth between u and v
}
\item{"edge_leachod"}{: Computes the similarity of two concepts based on the shortest path as Rada but also considering the depth of the ontology

\eqn{sim(u,v) = -log( (sp(u,v) + 1) / 2 * max_depth )}

}
\item{"edge_slimani"}{: Computes the similarity of two concepts based on the depth of the most specific common ancesto and the max depth of the concepts

\eqn{sim(u,v) = 2 * depth(MCA) / ((depth(u) + depth(v) + 1) * pf ))
}

depth(MCA) is the maximum depth of the most common ancestor of the concepts

 pf is a penalization factor used when concepts belong to the same hierarchy
}
}
The following measures require the specification of an additional meausre to compute the information content of nodes.
\itemize{
\item{"lin"}{: Computes the similarity between two concepts based on the information content of the two concepts and the information content of the most informative common ancestor of the two concepts

\eqn{ sim(u, v) = (2 * IC(MICA)) / ( IC(u) + IC(v) )}

IC(MICA) is the information content of the most informative common ancestor of u and v. MICA is the concept in the ancestors of both u and v that maximizes the Information Content measure.

}
\item{"resnik"}{: Computes the similarity between two concepts based on the information content of the most informative common ancestors of the compared concepts

\eqn{ sim(u,v) = IC(MICA)}
}


\item{"schlicker"}{: Computes the similarity between two concepts based on the information concent of the most informative common ancestor of the compared concepts and its probability of occurrence

\eqn{ sim(u,v) = (2 * IC(MICA)) / ( IC(u) + IC(v)) * (1 - Prob_MICA)}

Prob_MICA is the probability of occurrence of the most informative common ancestor of the compared concepts
}
\item{"jaccard"}{: Computes the similarity between two concepts based on the information content of the most informative common ancestor.

\eqn{ sim(u, v) = IC(MICA) / (IC(u) + IC(v) - IC(MICA)) } if the sum of the IC of the concepts is different from the IC of the MICA else sim(u, v) = 0.
}

\item{"sim"}{: This measure is based on \code{lin} similarity

\eqn{sim(u, v) = lin(u, v) - (1 - (1 / (1+ IC(MICA))))}

}
\item{"jc_norm"}{: Computes the similarity between two concepts based on the IC of the most informative ancestor of the concpets

\eqn{ sim(u,v) = 1 - (IC(u) + IC(v) - 2 * IC(MICA)) / 2}

}
}
Information content based measures require the configuration parameter for estimating concept specificity. Intrinsic estimation uses the topological properties of the taxonomic backbone of the semantic graph. There are different options:
\itemize{
\item{"zhou"}{: Intrinsic estimation of the specificity of the concepts based on their depth in the ontology.

\eqn{IC(c) = k( 1 - log(D(c))/log(|C|)) + (1 - k) (log(max(depth(x)))/ log(depth_max))}

k is a factor to adjust the weight of the two items of the equation

D(c) is the number of hyponims of concept c

|C| is the number of concepts in the ontology

depth(c) is the maximum depth of concept c

depth_max is the maximum depth in the ontology
}
\item{"resnik_1995"}{: Intrinsic estimation of the specificity of concepts based on the number of ancestors of the concept.

\eqn{IC(c) = |A(c)|}
}
\item{"seco"}{Intrinsic estimation of the specificity of the concepts based on the number of concepts they subsume.

\eqn{IC(c) = 1 - ( log(D(c) / log(|C|) )}

D(c) is the number of hyponims of concept c

|C| is the number of concepts in the ontology
}
\item{"sanchez"}{: Intrinsic estimation of the specificity of the concepts based on the number of leaves and the number of subsumers of the concepts

\eqn{IC(c) = -log(x / nb_leaves + 1) } with \eqn{x = |leaves(c)| / |A(c)|}

nb_leaves is the represents the number of leaves corresponding to the root node of the hierarchy

leaves(c) is the number of leaves corresponding to the concept c

|A(c)| is the number of concepts that subsume c

}
\item{"anc_norm"}{: Intrinsic estimation of the specificity of concepts based on the number of ancestors of a given concept normalized on the number of concepts in the ontology.}
\item{"depth_min_non_linear"}{: Intrinsic estimation of the specificity of concepts based on their minimum depth.}
\item{"depth_max_non_linear"}{: Intrinsic estimation of the specificity of concepts based on their maximum depth.}
}
}
\examples{
sim <- new('Similarity')
obo <- system.file('extdata', 'sample.cs.obo', package='OnassisJavaLibs')
ontology(sim) <- obo
pairwiseConfig(sim)

sim <- new('Similarity')
obo <- system.file('extdata', 'sample.cs.obo', package='OnassisJavaLibs')
ontology(sim) <- obo
pairwiseConfig(sim) <- 'edge_resnik'

 #The following configuration uses an information content based measure
 pairwiseConfig(sim) <- c('resnik', 'seco')

}
